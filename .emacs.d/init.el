;;; package --- my heretical emacs dotfile
;;; Commentary:
;;
;; Things to do:
;;  - reorganize configs
;;  - highlight column 80
;;  - look into yasnippets
;;  - HTML utilities
;;  - mark whitespace
;;

;;; Code:
;; The following is neccesary if your ISP redirects unknown hosts.
;; If not present, Emacs start-up time is extended by several minutes.
(setq tramp-ssh-controlmaster-options
      "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")

;; ==== Init / Bootstrap ====
(setq mandatory-packages '(package use-package))  ;; We need use-package to bootstrap emacs on first run

;; Set repositories
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
(package-initialize)                  ;; Activate all packages

(unless package-archive-contents      ;; Fetch list of available packages
  (package-refresh-contents))

(dolist (package mandatory-packages)  ;; Install the missing packages
  (unless (package-installed-p package)
    (package-install package)))

(require 'use-package)

;; ==== Theming ====

(use-package molokai-theme
  :ensure t
  :config
  (load-theme 'molokai t)
  (add-to-list 'custom-theme-load-path "~/.emacs.d/user/themes")
  (load-theme 'molokai-overrides t))  ;; Locally sourced.)

;;
;;;; ==== Keys Bindings ====
(use-package evil-leader  ;; Speak in tongues
  :ensure t
  :config
  (global-evil-leader-mode)
  (evil-leader/set-leader ",")
  (evil-leader/set-key
    "t" 'neotree          ;; <leader>t opens the tree view.
    "x" 'helm-M-x         ;; <leader>x opens helm version of Meta eXtend.
    "w" 'venv-workon      ;; <leader>w brings up venv selection minibuffer.
  ))

(use-package evil         ;; Casually commit heresy.
  :ensure t
  :config
  (evil-mode t)
  (define-key evil-normal-state-map (kbd "C-<left>") 'evil-window-left)       ;; Use C-arrow
  (define-key evil-normal-state-map (kbd "C-<down>") 'evil-window-down)       ;; to navigate
  (define-key evil-normal-state-map (kbd "C-<up>") 'evil-window-up)           ;; around window
  (define-key evil-normal-state-map (kbd "C-<right>") 'evil-window-right)     ;; splits.
  (define-key evil-insert-state-map (kbd "C-SPC") 'company-complete-common))  ;; C-SPC to request
                                                                              ;; completion candidates.

(use-package evil-tutor   ;; Tutor for the mode of the beast.
  :ensure t)

;; ==== UI ====
(when (window-system)     ;; Execute the following only when running the GUI.
  (set-frame-font "Iosevka-11")
  (menu-bar-mode -1)      ;; Don't show the menubar.
  (tool-bar-mode -1)      ;; Don't show the toolbar.
  (scroll-bar-mode -1)    ;; Don't show the scrollbar.
  (set-face-attribute 'vertical-border  ;; make the separating-border black
		      nil
		      :foreground "black"))

(use-package helm
  :ensure t
  :config
  (helm-mode 1)                  ;; Turn on helm.
  (setq helm-M-x-fuzzy-match t)  ;; Turn on fuzzy matching for helm-M-x.
  (setq helm-autoresize-mode t)  ;; Resize completion window based on the number of candidates.
  )


(use-package neotree
  :ensure t
  :config
  (setq neo-smart-open t)  ;; Jump to the file's node when opening neotree
                           ;; TODO Replace when using projectile
  (add-hook 'neotree-mode-hook
            (lambda ()
              (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
              (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
              (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
              (define-key evil-normal-state-local-map (kbd "i") 'neotree-enter-horizontal-split)
              (define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
              (define-key evil-normal-state-local-map (kbd "n") 'neotree-create-node)
              (define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)
              (define-key evil-normal-state-local-map (kbd "r") 'neotree-rename-node)
              (define-key evil-normal-state-local-map (kbd "c") 'neotree-change-root)
              (define-key evil-normal-state-local-map (kbd "R") 'neotree-refresh)))
  ;; set files to be hidden from the tree view
  ;; TODO toggle files to be shown/hidden
  (setq neo-hidden-regexp-list '("^.git$"         ;; Git folder
				 "^__init__.py$"  ;; Needed to mark a folder as being part of a module
				 "\\.pyc$"        ;; Generated by CPython at runtime
				 "^__pycache__$"  ;; Generated by CPython at runtime
				 "~$"             ;; Buffer file made by Emacs
				 "^#.*#$"         ;; Lockfile created by Emacs
				 )))

(setq-default indent-tabs-mode nil)  ;; use spaces for indentation
(setq-default indicate-empty-lines t)
(progn
  ;; Define a tilde bitmap face.
  ;; [#b00000000  0
  ;;  #b00000000  0
  ;;  #b00000000  0
  ;;  #b01110001  113
  ;;  #b11011011  219
  ;;  #b10001110  142
  ;;  #b00000000  0
  ;;  #b00000000] 0
  (define-fringe-bitmap 'tilde [0 0 0 113 219 142 0 0] nil nil 'center)
  ;; Set the tilde bitmap.
  (setcdr (assq 'empty-line fringe-indicator-alist) 'tilde))
;; Change the tilde collor to the theme's `comment` color.
(set-fringe-bitmap-face 'tilde 'font-lock-comment-face)

(add-hook 'prog-mode-hook 'linum-mode)         ;; Line numbering when programming
(add-hook 'prog-mode-hook 'hl-line-mode)       ;; Line highlighting when programming
(add-hook 'prog-mode-hook 'electric-pair-mode) ;; Automatically pair matching elemets
(setq show-paren-delay 0)                      ;; Make delay in showing paren matching 0
(add-hook 'prog-mode-hook 'show-paren-mode)    ;; Show the matching paren
(setq whitespace-style (quote (spaces tabs newline
			       space-mark tab-mark newline-mark)))

(add-hook 'prog-mode-hook
          (lambda()
            (push '("lambda" . "Î»") prettify-symbols-alist)
            ))

;; ==== Virtualenv ====
(use-package virtualenvwrapper
  :ensure t
  :config
  (venv-initialize-interactive-shells)
  (venv-initialize-eshell)
  (setq venv-location "~/Programming/virtualenvs/"))

;; ==== Syntax checks ====
;; Python syntax checking is provided by /usr/bin/flake8 (Python3 only)
;; Make sure the checkers are the latest versions
(use-package flycheck
  :ensure t
  :config)

;; ==== Code Completion ====
(use-package company
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'company-mode)
  (setq company-tooltip-align-annotations t)
  (setq company-idle-delay 0)
  (setq company-dabbrev-downcase nil))        ;; Makes the abbrev backend case sensitive

;; Python code completion via Jedi Server
(use-package company-jedi
  :ensure t
  :config
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi)
    (flycheck-mode t))
  (add-hook 'python-mode-hook 'my/python-mode-hook))

(use-package tide
  :ensure t
  :config
  (defun setup-tide-mode()
    (interactive)
    (tide-setup)
    (flycheck-mode t)
    (eldoc-mode t))
  (add-hook 'typescript-mode-hook 'setup-tide-mode))

(provide 'init)
;;; init.el ends here
